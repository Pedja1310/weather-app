{"version":3,"sources":["components/styles/GlobalStyle.js","components/styles/GlobalWrapper.js","components/context/WeatherContext.js","components/LocationSearch.js","components/Header.js","helpers/helpers.js","components/CurrentWeather.js","components/HourlyWeather.js","components/DailyWeatherCard.js","components/WeeklyWeather.js","components/WeatherDataComponents.js","components/LandingPage.js","components/PageSwitcher.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","normalize","Wrapper","styled","div","GlobalWrapper","children","WeatherContext","createContext","WeatherProvider","useState","currentWeather","setCurrentWeather","hourlyWeather","setHourlyWeather","weeklyWeather","setWeeklyWeather","getWeatherData","a","lat","lng","openWeatherEndpoint","process","fetch","response","json","weatherReport","current","hourly","daily","Provider","value","SearchWrapper","LocationSearch","useContext","handleSelect","e","geocodeByAddress","label","geocode","getLatLng","latLng","console","error","apiKey","onSelect","placeholder","selectProps","onChange","Navbar","nav","Header","className","roundTemperature","num","Math","round","formatUnix","unixTime","format","moment","unix","CurrentWeather","section","CurrentWeatherComponent","temp","feels_like","wind_speed","humidity","pressure","HourlyWeather","HourlyWeatherComponent","temepratureData","filter","item","index","map","chartData","labels","dt","datasets","data","fill","borderColor","pointBackgroundColor","Fragment","length","options","maintainAspectRatio","title","display","text","fontColor","legend","scales","xAxes","offset","gridLines","drawBorder","drawTicks","drawOnChartArea","ticks","yAxes","Card","DailyWeatherCard","day","min","max","WeeklyWeather","Title","WeeklyWeatherComponent","WeatherDataComponents","LandingPageComponent","LandingPage","type","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","PageSwitcher","Object","entries","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51f6c8cb.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport { normalize } from \"styled-normalize\";\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize}\n  \n  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,500&display=swap');\n\n  html {\n    box-sizing: border-box;\n  }\n\n  *,\n  *::before,\n  *::after {\n    margin: 0;\n    padding: 0;\n    box-sizing: inherit;\n  }\n\n  body {\n    /* background-image: linear-gradient(135deg, #009E9E, #8ECAED); */\n    background-color: #52cfd1;\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Montserrat', 'Roboto', 'Segoe UI',\n      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  #root {\n    height: 100vh;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default function GlobalWrapper({ children }) {\n  return <Wrapper>{children}</Wrapper>;\n}\n","import React, { useState, createContext } from \"react\";\n\nexport const WeatherContext = createContext();\n\nexport const WeatherProvider = ({ children }) => {\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [hourlyWeather, setHourlyWeather] = useState([]);\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n\n  const getWeatherData = async ({ lat, lng }) => {\n    const openWeatherEndpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}&units=metric`;\n\n    const response = await fetch(openWeatherEndpoint);\n    const weatherReport = await response.json();\n    const { current, hourly, daily } = weatherReport;\n\n    setCurrentWeather(current);\n    setHourlyWeather(hourly);\n    setWeeklyWeather(daily);\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        currentWeather,\n        hourlyWeather,\n        weeklyWeather,\n        getWeatherData,\n      }}\n    >\n      {children}\n    </WeatherContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport GooglePlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-google-places-autocomplete\";\nimport { WeatherContext } from \"./context/WeatherContext\";\n\nconst SearchWrapper = styled.div`\n  width: 15rem;\n`;\n\nexport default function LocationSearch() {\n  const { getWeatherData } = useContext(WeatherContext);\n\n  const handleSelect = async (e) => {\n    try {\n      const geocode = await geocodeByAddress(e.label);\n      const latLng = await getLatLng(geocode[0]);\n      getWeatherData(latLng);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        onSelect={handleSelect}\n        placeholder=\"Enter location\"\n        selectProps={{\n          onChange: handleSelect,\n        }}\n      />\n    </SearchWrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport LocationSearch from \"./LocationSearch\";\n\nconst Navbar = styled.nav`\n  width: 100%;\n  padding: 0 5%;\n  margin: 0 auto;\n  height: 10%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n\n  & .logo {\n    font-size: 1.4rem;\n    color: #fff;\n  }\n`;\n\nexport default function Header() {\n  return (\n    <Navbar>\n      <div className=\"logo\">\n        <p>WeatherApp</p>\n      </div>\n      <LocationSearch />\n    </Navbar>\n  );\n}\n","import moment from \"moment\";\n\nexport const roundTemperature = (num) => Math.round(num);\n\nexport const formatUnix = (unixTime, format) =>\n  moment.unix(unixTime).format(format);\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { WeatherContext } from \"./context/WeatherContext\";\nimport { roundTemperature } from \"../helpers/helpers\";\n\nconst CurrentWeather = styled.section`\n  height: 25%;\n  width: 90%;\n  margin: 1rem auto;\n  padding: 0.5rem 2rem;\n  padding-right: 0;\n  color: #fff;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n\n  & .weatherInformation {\n    display: flex;\n    flex-direction: row;\n\n    & .currentTemp {\n      height: 100%;\n      width: 150px;\n      font-size: 8rem;\n      display: flex;\n      justify-content: center;\n\n      & .cels {\n        font-size: 1.5rem;\n        align-self: start;\n        padding-top: 1.5rem;\n        padding-left: 0.2rem;\n      }\n    }\n\n    & .weatherStats {\n      padding: 1.6rem;\n      font-size: 0.9rem;\n      line-height: 1.8;\n    }\n  }\n\n  & .icon {\n    width: 15rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    & .summary {\n      margin-top: 0.5rem;\n      text-align: center;\n    }\n  }\n`;\n\nexport default function CurrentWeatherComponent() {\n  const { currentWeather } = useContext(WeatherContext);\n\n  return (\n    <CurrentWeather>\n      <div className=\"weatherInformation\">\n        <div className=\"currentTemp\">\n          <p className=\"temp\">{roundTemperature(currentWeather.temp)}</p>\n          <span className=\"cels\">&#8451;</span>\n        </div>\n        <div className=\"weatherStats\">\n          <p>\n            Feels Like: {roundTemperature(currentWeather.feels_like)}\n            <span>&#8451;</span>\n          </p>\n          <p>Wind Speed: {currentWeather.wind_speed} m/s </p>\n          <p>Humidity: {currentWeather.humidity}% </p>\n          <p>Pressure: {currentWeather.pressure} mBar </p>\n        </div>\n      </div>\n    </CurrentWeather>\n  );\n}\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { Line } from \"react-chartjs-2\";\nimport { WeatherContext } from \"./context/WeatherContext\";\nimport { roundTemperature, formatUnix } from \"../helpers/helpers\";\n\nconst HourlyWeather = styled.section`\n  height: 30%;\n  width: 90%;\n  margin: 0 auto;\n\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n`;\n\nexport default function HourlyWeatherComponent() {\n  const { hourlyWeather } = useContext(WeatherContext);\n\n  const temepratureData = hourlyWeather\n    .filter((item, index) => index < 24)\n    .map((item) => roundTemperature(item.temp));\n\n  const temepratureLabels = hourlyWeather\n    .filter((item, index) => index < 24)\n    .map((item) => `${formatUnix(item.dt, \"HH\")}h`);\n\n  const chartData = {\n    labels: temepratureLabels,\n    datasets: [\n      {\n        label: \"24 Hour prediction\",\n        data: temepratureData,\n        fill: false,\n        borderColor: \"rgba(255, 255, 255, 0.7)\",\n        pointBackgroundColor: \"rgba(255, 255, 255, 0.8)\",\n      },\n    ],\n  };\n\n  const chartOpions = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"24 Hour Prediction\",\n      fontColor: \"rgba(255,255,255, 0.5)\",\n    },\n    legend: { display: false },\n    scales: {\n      xAxes: [\n        {\n          offset: true,\n          gridLines: {\n            drawBorder: false,\n            drawTicks: false,\n            drawOnChartArea: false,\n            display: false,\n          },\n          ticks: {\n            fontColor: \"rgba(255,255,255, 0.5)\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          offset: true,\n          gridLines: {\n            drawBorder: false,\n            drawTicks: false,\n            drawOnChartArea: false,\n            display: false,\n          },\n          ticks: {\n            fontColor: \"rgba(255,255,255, 0.5)\",\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <React.Fragment>\n      {hourlyWeather.length === 0 ? null : (\n        <HourlyWeather>\n          <Line data={chartData} options={chartOpions} />\n        </HourlyWeather>\n      )}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { formatUnix, roundTemperature } from \"../helpers/helpers\";\n\nconst Card = styled.div`\n  width: 13%;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n  color: #fff;\n\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  & .average {\n    font-size: 4.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    & .cels {\n      font-size: 1rem;\n      align-self: start;\n      padding-top: 0.9rem;\n      padding-left: 0.1rem;\n    }\n  }\n\n  & .day {\n    display: flex;\n    justify-content: center;\n  }\n\n  @media (max-width: 1024px) {\n    width: 100%;\n    margin-bottom: 1rem;\n    flex-direction: row;\n    align-items: center;\n    padding: 0.5rem;\n    & .temperature,\n    .day {\n      font-size: 1.2rem;\n    }\n  }\n`;\n\nexport default function DailyWeatherCard({ item }) {\n  const { temp, dt } = item;\n  return (\n    <Card>\n      <div className=\"day\">\n        <p>{formatUnix(dt, \"ddd\")}</p>\n      </div>\n      <div className=\"average\">\n        <p>{roundTemperature(temp.day)}</p>\n        <span className=\"cels\">&#8451;</span>\n      </div>\n      <div className=\"temperature\">\n        <p>\n          Min: {roundTemperature(temp.min)}\n          <span>&#8451;</span>\n        </p>\n        <p>\n          Max: {roundTemperature(temp.max)}\n          <span>&#8451;</span>\n        </p>\n      </div>\n    </Card>\n  );\n}\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport DailyWeatherCard from \"./DailyWeatherCard\";\nimport { WeatherContext } from \"./context/WeatherContext\";\n\nconst WeeklyWeather = styled.section`\n  height: 30%;\n  width: 90%;\n  margin: 0 auto;\n  padding: 0 0 1rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  @media (max-width: 1024px) {\n    flex-direction: column;\n  }\n`;\n\nconst Title = styled.div`\n  width: 90%;\n  height: 2rem;\n  margin: 1rem auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n`;\n\nexport default function WeeklyWeatherComponent() {\n  const { weeklyWeather } = useContext(WeatherContext);\n\n  return (\n    <React.Fragment>\n      <Title>\n        <p>Weekly Weather Prediction</p>\n      </Title>\n      <WeeklyWeather>\n        {weeklyWeather.map((item, index) =>\n          index > 0 ? <DailyWeatherCard item={item} key={item.dt} /> : null\n        )}\n      </WeeklyWeather>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport CurrentWeatherComponent from \"./CurrentWeather\";\nimport HourlyWeatherComponent from \"./HourlyWeather\";\nimport WeeklyWeatherComponent from \"./WeeklyWeather\";\n\nexport default function WeatherDataComponents() {\n  return (\n    <React.Fragment>\n      <CurrentWeatherComponent />\n      <HourlyWeatherComponent />\n      <WeeklyWeatherComponent />\n    </React.Fragment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { WeatherContext } from \"./context/WeatherContext\";\n\nconst LandingPageComponent = styled.div`\n  color: #f2f2f2;\n  width: 90%;\n  margin: 0 auto;\n  padding: 4rem;\n\n  & .mainHeading {\n    font-size: 4rem;\n    margin: 0;\n    margin-bottom: 1.7rem;\n  }\n\n  & .subHeading {\n    width: 55%;\n    font-size: 1.2rem;\n  }\n\n  & button {\n    margin-top: 6rem;\n    padding: 1rem 4rem;\n    border-radius: 30px;\n    border: none;\n    -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n    box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\n  }\n\n  & button:hover {\n    background-color: #f2f2f2;\n    cursor: pointer;\n  }\n\n  & button:active {\n    outline: none;\n  }\n`;\n\nexport default function LandingPage() {\n  const { getWeatherData } = useContext(WeatherContext);\n\n  const getClientLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const latLng = {};\n      latLng.lat = position.coords.latitude;\n      latLng.lng = position.coords.longitude;\n      getWeatherData(latLng);\n    });\n  };\n\n  return (\n    <LandingPageComponent>\n      <h1 className=\"mainHeading\">WeatherApp</h1>\n      <div className=\"subHeading\">\n        <p>\n          Click on the button and press allow to see local weather, or use\n          search box in the top right corner.\n        </p>\n      </div>\n      <button type=\"button\" onClick={getClientLocation}>\n        Get Local Weather\n      </button>\n    </LandingPageComponent>\n  );\n}\n","import React, { useContext } from \"react\";\nimport WeatherDataComponents from \"./WeatherDataComponents\";\nimport LandingPage from \"./LandingPage\";\n\nimport { WeatherContext } from \"./context/WeatherContext\";\n\nexport default function PageSwitcher() {\n  const { currentWeather } = useContext(WeatherContext);\n  return (\n    <React.Fragment>\n      {Object.entries(currentWeather).length > 0 ? (\n        <WeatherDataComponents />\n      ) : (\n        <LandingPage />\n      )}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport GlobalWrapper from \"./components/styles/GlobalWrapper\";\nimport Header from \"./components/Header\";\nimport PageSwitcher from \"./components/PageSwitcher\";\n\nimport { WeatherProvider } from \"./components/context/WeatherContext\";\n\nfunction App() {\n  return (\n    <WeatherProvider>\n      <GlobalWrapper>\n        <Header />\n        <PageSwitcher />\n      </GlobalWrapper>\n    </WeatherProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GlobalStyle from \"./components/styles/GlobalStyle\";\nimport App from \"./App\";\n\nconst Root = () => {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <App />\n    </React.Fragment>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}