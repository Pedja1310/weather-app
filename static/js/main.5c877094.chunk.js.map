{"version":3,"sources":["components/styles/GlobalStyle.js","components/styles/GlobalWrapper.js","components/context/WeatherContext.js","components/LocationSearch.js","components/Header.js","helpers/helpers.js","components/CurrentWeather.js","components/HourlyWeather.js","components/DailyWeatherCard.js","components/WeeklyWeather.js","components/WeatherDataComponents.js","components/LandingPage.js","components/PageSwitcher.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","normalize","Wrapper","styled","div","GlobalWrapper","children","WeatherContext","createContext","WeatherProvider","useState","currentWeather","setCurrentWeather","hourlyWeather","setHourlyWeather","weeklyWeather","setWeeklyWeather","getWeatherData","a","lat","lng","darkSkyEndpoint","process","fetch","response","json","weatherReport","currently","hourly","daily","data","slice","Provider","value","SearchWrapper","LocationSearch","useContext","handleSelect","e","geocodeByAddress","description","geocode","getLatLng","latLng","console","error","googleMapsApiKey","id","libraries","version","inputStyle","width","borderRadius","suggestionsStyles","container","onSelect","placeholder","Navbar","nav","Header","className","roundTemperature","num","Math","round","formatIconName","str","replace","toUpperCase","formatUnix","unixTime","format","moment","unix","CurrentWeather","section","CurrentWeatherComponent","temperature","apparentTemperature","windSpeed","humidity","pressure","icon","color","summary","HourlyWeather","HourlyWeatherComponent","temepratureData","filter","item","index","map","chartData","labels","time","datasets","label","fill","borderColor","pointBackgroundColor","length","options","maintainAspectRatio","title","display","text","fontColor","legend","scales","xAxes","offset","gridLines","drawBorder","drawTicks","drawOnChartArea","ticks","yAxes","Card","DailyWeatherCard","temperatureLow","temperatureHigh","WeeklyWeather","WeeklyWeatherComponent","key","WeatherDataComponents","LandingPageComponent","LandingPage","type","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","PageSwitcher","Object","entries","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c877094.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport { normalize } from \"styled-normalize\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n  \r\n  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,500&display=swap');\r\n\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    background-image: linear-gradient(135deg, #009E9E, #8ECAED);\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Montserrat', 'Roboto', 'Segoe UI',\r\n      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  #root {\r\n    height: 100vh;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport default function GlobalWrapper({ children }) {\r\n  return <Wrapper>{children}</Wrapper>;\r\n}\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const WeatherContext = createContext();\r\n\r\nexport const WeatherProvider = ({ children }) => {\r\n  const [currentWeather, setCurrentWeather] = useState({});\r\n  const [hourlyWeather, setHourlyWeather] = useState([]);\r\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\r\n\r\n  const getWeatherData = async ({ lat, lng }) => {\r\n    const darkSkyEndpoint = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY_API_KEY}/${lat},${lng}?units=si&exclude=minutely,flags,reports,alerts`;\r\n\r\n    const response = await fetch(darkSkyEndpoint);\r\n    const weatherReport = await response.json();\r\n    const { currently, hourly, daily } = weatherReport;\r\n\r\n    setCurrentWeather(currently);\r\n    setHourlyWeather(hourly.data);\r\n    setWeeklyWeather(daily.data.slice(1));\r\n  };\r\n\r\n  return (\r\n    <WeatherContext.Provider\r\n      value={{\r\n        currentWeather,\r\n        hourlyWeather,\r\n        weeklyWeather,\r\n        getWeatherData\r\n      }}\r\n    >\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport GooglePlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng\r\n} from \"react-google-places-autocomplete\";\r\nimport { LoadScript } from \"@react-google-maps/api\";\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\n\r\nconst SearchWrapper = styled.div`\r\n  width: 15rem;\r\n`;\r\n\r\nexport default function LocationSearch() {\r\n  const { getWeatherData } = useContext(WeatherContext);\r\n\r\n  const handleSelect = async e => {\r\n    try {\r\n      const geocode = await geocodeByAddress(e.description);\r\n      const latLng = await getLatLng(geocode[0]);\r\n      getWeatherData(latLng);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const inputStyle = {\r\n    width: \"100%\",\r\n    borderRadius: \"4px\"\r\n  };\r\n\r\n  const suggestionsStyles = {\r\n    container: {\r\n      width: \"100%\"\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchWrapper>\r\n      <LoadScript\r\n        googleMapsApiKey={process.env.REACT_APP_GOOGLE_API_KEY}\r\n        id=\"script-loader\"\r\n        libraries={[\"geometry\", \"drawing\", \"places\"]}\r\n        version=\"3\"\r\n      >\r\n        <GooglePlacesAutocomplete\r\n          inputStyle={inputStyle}\r\n          suggestionsStyles={suggestionsStyles}\r\n          onSelect={handleSelect}\r\n          placeholder=\"Enter location\"\r\n        />\r\n      </LoadScript>\r\n    </SearchWrapper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport LocationSearch from \"./LocationSearch\";\r\n\r\nconst Navbar = styled.nav`\r\n  width: 100%;\r\n  padding: 0 5%;\r\n  margin: 0 auto;\r\n  height: 10%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n\r\n  & .logo {\r\n    font-size: 1.2rem;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Navbar>\r\n      <div className=\"logo\">\r\n        <p>WeatherApp</p>\r\n      </div>\r\n      <LocationSearch />\r\n    </Navbar>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\n\r\nexport const roundTemperature = num => Math.round(num);\r\n\r\nexport const formatIconName = str => str.replace(/-/g, \"_\").toUpperCase();\r\n\r\nexport const formatUnix = (unixTime, format) =>\r\n  moment.unix(unixTime).format(format);\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Skycons from \"react-skycons\";\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\nimport { formatIconName, roundTemperature } from \"../helpers/helpers\";\r\n\r\nconst CurrentWeather = styled.section`\r\n  height: 25%;\r\n  width: 90%;\r\n  margin: 1rem auto;\r\n  padding: 0.5rem 2rem;\r\n  padding-right: 0;\r\n  color: #fff;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n\r\n  & .weatherInformation {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    & .currentTemp {\r\n      height: 100%;\r\n      width: 150px;\r\n      font-size: 8rem;\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n\r\n    & .weatherStats {\r\n      padding: 1.6rem;\r\n      font-size: 0.9rem;\r\n      line-height: 1.8;\r\n    }\r\n  }\r\n\r\n  & .icon {\r\n    width: 15rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n    & .summary {\r\n      margin-top: 0.5rem;\r\n      text-align: center;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function CurrentWeatherComponent() {\r\n  const { currentWeather } = useContext(WeatherContext);\r\n\r\n  return (\r\n    <>\r\n      <CurrentWeather>\r\n        <div className=\"weatherInformation\">\r\n          <div className=\"currentTemp\">\r\n            <p className=\"temp\">\r\n              {roundTemperature(currentWeather.temperature)}\r\n            </p>\r\n          </div>\r\n          <div className=\"weatherStats\">\r\n            <p>\r\n              Feels Like: \r\n{' '}\r\n{roundTemperature(currentWeather.apparentTemperature)}\r\n              <span>&#8451;</span>\r\n            </p>\r\n            <p>Wind Speed: {currentWeather.windSpeed} m/s                         </p>\r\n            <p>\r\nHumidity:\r\n{' '}\r\n{currentWeather.humidity * 100}\r\n%\r\n{' '}\r\n</p>\r\n            <p>Pressure: {currentWeather.pressure} mBar                         </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"icon\">\r\n          <Skycons icon={formatIconName(currentWeather.icon)} color=\"white\" />\r\n          <p className=\"summary\">{currentWeather.summary}</p>\r\n        </div>\r\n      </CurrentWeather>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\nimport { roundTemperature, formatUnix } from \"../helpers/helpers\";\r\n\r\nconst HourlyWeather = styled.section`\r\n  height: 30%;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n\r\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n`;\r\n\r\nexport default function HourlyWeatherComponent() {\r\n  const { hourlyWeather } = useContext(WeatherContext);\r\n\r\n  const temepratureData = hourlyWeather\r\n    .filter((item, index) => index < 24)\r\n    .map(item => roundTemperature(item.temperature));\r\n\r\n  const temepratureLabels = hourlyWeather\r\n    .filter((item, index) => index < 24)\r\n    .map(item => `${formatUnix(item.time, \"HH\")}h`);\r\n\r\n  const chartData = {\r\n    labels: temepratureLabels,\r\n    datasets: [\r\n      {\r\n        label: \"24 Hour prediction\",\r\n        data: temepratureData,\r\n        fill: false,\r\n        borderColor: \"rgba(255, 255, 255, 0.7)\",\r\n        pointBackgroundColor: \"rgba(255, 255, 255, 0.8)\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  const chartOpions = {\r\n    maintainAspectRatio: false,\r\n    title: {\r\n      display: true,\r\n      text: \"24 Hour Prediction\",\r\n      fontColor: \"rgba(255,255,255, 0.5)\"\r\n    },\r\n    legend: { display: false },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          offset: true,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            drawTicks: false,\r\n            drawOnChartArea: false,\r\n            display: false\r\n          },\r\n          ticks: {\r\n            fontColor: \"rgba(255,255,255, 0.5)\"\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          offset: true,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            drawTicks: false,\r\n            drawOnChartArea: false,\r\n            display: false\r\n          },\r\n          ticks: {\r\n            fontColor: \"rgba(255,255,255, 0.5)\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {hourlyWeather.length === 0 ? null : (\r\n        <HourlyWeather>\r\n          <Line data={chartData} options={chartOpions} />\r\n        </HourlyWeather>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Skycons from \"react-skycons\";\r\nimport {\r\n  formatIconName,\r\n  formatUnix,\r\n  roundTemperature\r\n} from \"../helpers/helpers\";\r\n\r\nconst Card = styled.div`\r\n  width: 13%;\r\n  padding: 0.3rem;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  color: #fff;\r\n\r\n  -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  & .day {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport default function DailyWeatherCard({ item }) {\r\n  const { temperatureLow, temperatureHigh, icon, time } = item;\r\n  // TODO fix indetation before github push\r\n  return (\r\n    <Card>\r\n      <div className=\"temperature\">\r\n        <p>\r\n          Min:           {roundTemperature(temperatureLow)}\r\n          <span>&#8451;</span>\r\n        </p>\r\n        <p>\r\n          Max:           {roundTemperature(temperatureHigh)}\r\n          <span>&#8451;</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"icon\">\r\n        <Skycons icon={formatIconName(icon)} color=\"white\" />\r\n      </div>\r\n      <div className=\"day\">\r\n        <p>{formatUnix(time, \"ddd\")}</p>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DailyWeatherCard from \"./DailyWeatherCard\";\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\n\r\nconst WeeklyWeather = styled.section`\r\n  height: 30%;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  padding: 1rem 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default function WeeklyWeatherComponent() {\r\n  const { weeklyWeather } = useContext(WeatherContext);\r\n\r\n  return (\r\n    <WeeklyWeather>\r\n      {weeklyWeather.map(item => (\r\n        <DailyWeatherCard item={item} key={item.time} />\r\n      ))}\r\n    </WeeklyWeather>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CurrentWeatherComponent from \"./CurrentWeather\";\r\nimport HourlyWeatherComponent from \"./HourlyWeather\";\r\nimport WeeklyWeatherComponent from \"./WeeklyWeather\";\r\n\r\nexport default function WeatherDataComponents() {\r\n  return (\r\n    <>\r\n      <CurrentWeatherComponent />\r\n      <HourlyWeatherComponent />\r\n      <WeeklyWeatherComponent />\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\n\r\nconst LandingPageComponent = styled.div`\r\n  color: #f2f2f2;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  padding: 4rem;\r\n\r\n  & .mainHeading {\r\n    font-size: 4rem;\r\n    margin: 0;\r\n    margin-bottom: 1.7rem;\r\n  }\r\n\r\n  & .subHeading {\r\n    width: 55%;\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  & button {\r\n    margin-top: 6rem;\r\n    padding: 1rem 4rem;\r\n    border-radius: 30px;\r\n    border: none;\r\n    -webkit-box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n    box-shadow: 0px 0px 12px -2px rgba(0, 0, 0, 0.45);\r\n  }\r\n\r\n  & button:hover {\r\n    background-color: #f2f2f2;\r\n    cursor: pointer;\r\n  }\r\n\r\n  & button:active {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport default function LandingPage() {\r\n  const { getWeatherData } = useContext(WeatherContext);\r\n\r\n  const getClientLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      const latLng = {};\r\n      latLng.lat = position.coords.latitude;\r\n      latLng.lng = position.coords.longitude;\r\n      getWeatherData(latLng);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <LandingPageComponent>\r\n      <h1 className=\"mainHeading\">WeatherApp</h1>\r\n      <div className=\"subHeading\">\r\n        <p>\r\n          Click on the button and press allow to see local weather, or use\r\n          search box in the top right corner.\r\n        </p>\r\n      </div>\r\n      <button type=\"button\" onClick={getClientLocation}>\r\n        Get Local Weather\r\n      </button>\r\n    </LandingPageComponent>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport WeatherDataComponents from \"./WeatherDataComponents\";\r\nimport LandingPage from \"./LandingPage\";\r\n\r\nimport { WeatherContext } from \"./context/WeatherContext\";\r\n\r\nexport default function PageSwitcher() {\r\n  const { currentWeather } = useContext(WeatherContext);\r\n  return (\r\n    <>\r\n      {Object.entries(currentWeather).length > 0 ? (\r\n        <WeatherDataComponents />\r\n      ) : (\r\n        <LandingPage />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport GlobalWrapper from \"./components/styles/GlobalWrapper\";\nimport Header from \"./components/Header\";\nimport PageSwitcher from \"./components/PageSwitcher\";\n\nimport { WeatherProvider } from \"./components/context/WeatherContext\";\n\nfunction App() {\n  return (\n    <WeatherProvider>\n      <GlobalWrapper>\n        <Header />\n        <PageSwitcher />\n      </GlobalWrapper>\n    </WeatherProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GlobalStyle from \"./components/styles/GlobalStyle\";\nimport App from \"./App\";\n\nconst Root = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <App />\n    </>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}